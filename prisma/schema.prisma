// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String

  customProducts Product[]
  dayEntries     DayEntry[]
}

model Product {
  id           Int           @id @default(autoincrement())
  name         String
  source       String
  servingSizes ServingSize[]

  nutrients   Nutrients @relation(fields: [nutrientsId], references: [id], onDelete: Cascade)
  nutrientsId Int       @unique

  userId Int?
  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  FoodEntry FoodEntry[]
}

model Nutrients {
  id      Int      @id @default(autoincrement())
  energy  Int
  protein Float
  fat     Float
  carbs   Float
  extra   Json?
  product Product?
}

model ServingSize {
  id         Int     @id @default(autoincrement())
  name       String
  multiplier Float
  product    Product @relation(fields: [productId], references: [id])
  productId  Int
}

model DayEntry {
  id     Int      @id @default(autoincrement())
  date   DateTime
  userId Int
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  foodEntries FoodEntry[]
}

model FoodEntry {
  id         Int      @id @default(autoincrement())
  quantity   Float
  dayEntryId Int
  dayEntry   DayEntry @relation(fields: [dayEntryId], references: [id], onDelete: Cascade)
  productId  Int
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}
